import '../data/posts_repository.dart';
import '../../../core/usecases/usecase.dart';

/// ðŸ“Œ `FetchPostsUseCase`
/// Caso de uso para obtener las publicaciones de un usuario desde el repositorio.
/// Sigue el principio de inversiÃ³n de dependencias al depender de `PostsRepository` en lugar de realizar la lÃ³gica directamente.
class FetchPostsUseCase extends UseCase<List<Map<String, dynamic>>, int> {
  /// Repositorio que maneja la obtenciÃ³n de publicaciones desde la API.
  final PostsRepository _repository;

  /// ðŸ“Œ Constructor
  /// - **ParÃ¡metro**: `_repository` â†’ Instancia de `PostsRepository` para acceder a los datos.
  FetchPostsUseCase(this._repository);

  /// ðŸ“Œ MÃ©todo `execute(int params)`
  /// - **ParÃ¡metro**: `params` â†’ ID del usuario cuyas publicaciones queremos obtener.
  /// - **Devuelve**: Una lista de mapas (`List<Map<String, dynamic>>`) con las publicaciones del usuario.
  /// - **Manejo de errores**: La lÃ³gica de manejo de errores se delega al repositorio.
  @override
  Future<List<Map<String, dynamic>>> execute(int params) async {
    return List<Map<String, dynamic>>.from(
        await _repository.fetchPosts(params));
  }
}
